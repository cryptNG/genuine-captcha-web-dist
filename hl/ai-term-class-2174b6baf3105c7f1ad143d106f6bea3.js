export default class AiTerm extends HTMLElement{shadowRoot=null
constructor(){super(),this.prompt=""
const e=document.getElementById("ai-term").content,n=this.attachShadow({mode:"open"})
this.shadowRoot=n
const t=document.createElement("style")
t.textContent='\n          :host{\n            --underline-color:red;\n            --underline-style:dashed;\n            --underline-width:0.1em;\n            --underline-top:calc(50% + 0.5em);\n            --text-color:inherited;\n            --text-family:revert;\n            --text-size:auto;\n            --text-cursor:pointer;\n            --underline-rgb:linear-gradient(90deg, #e50b58,#b29d23,#55ddbd);\n            --underline-rgb-1:linear-gradient(90deg, #ae1ffd,#ff3c34,#9bbf24);\n            --underline-rgb-2:linear-gradient(130deg,#2E3192,#1BFFFF 76.05%);\n            --underline-rgb-3:linear-gradient(130deg,#ff7a18,#af002d 41.07%,#319197 76.05%);\n            --underline-rgb-5:linear-gradient(130deg,#ff7a18,#af002d 41.07%,#319197 76.05%);\n            --asterisk-margin-right:0.2em;\n          }\n\n          span.ai-term {\n            position:relative;\n            font-size:var(--text-size);\n            font-family:var(--text-family);\n            cursor:var(--text-cursor);\n            color:var(--text-color);\n          }\n\n          :host(:not(.rgb)) :not(.ai-term-container.rgb) span.ai-term { \n            padding: 0px;\n            border-bottom: var(--underline-width) var(--underline-style) var(--underline-color);\n            cursor: pointer;\n          }\n\n          .ai-term-container.rgb span.ai-term:after,\n          :host(.rgb) span.ai-term:after {\n            content: "";\n            position: absolute;\n            top: var(--underline-top);\n            width: 100%;\n            left: 0;\n            height:  max(2px,calc(var(--underline-width) / 2));\n            border-radius: 2px;\n            background: var(--underline-rgb);\n          }\n\n          .ai-term-container.asterisk span.ai-term,\n          :host(.asterisk) span.ai-term {\n            margin-right:var(--asterisk-margin-right);\n          }\n\n          .ai-term-container.asterisk span.ai-term:before,\n          :host(.asterisk) span.ai-term:before {\n            content: "*";\n            position: absolute;\n            top: -0.3em;\n            width: 1em;\n            color: var(--underline-color);\n            left: calc(100% - 0.1em);\n          }\n      ',n.appendChild(t),n.appendChild(e.cloneNode(!0)),this.registerOptionsChange(),n.querySelector(".ai-term").addEventListener("click",(e=>{e.stopPropagation(),document.querySelector("body").aiTermInputRef.value=null===(this.prompt||null)?this.textContent:this.prompt,document.querySelector("body").aiTermChatWindowRef.show(),document.querySelector("body").aiTermButtonRef.click()}))}registerOptionsChange=async()=>{const e=document.querySelector("body")
for(;void 0===e.aiTermRegisterOptionChange;)await Sleep(100)
e.aiTermRegisterOptionChange(this.handleOptionsChange)}
handleOptionsChange=e=>{null!==(e?.highlight||null)&&e.highlight.split(",").forEach((e=>this.shadowRoot.querySelector(".ai-term-container").classList.add(e)))}
static get observedAttributes(){return["prompt"]}attributeChangedCallback(e,n,t){"prompt"===e&&(this.prompt=t)}}async function Sleep(e){return new Promise((n=>setTimeout(n,e)))}